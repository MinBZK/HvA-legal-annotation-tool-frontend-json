input AnnotatedLawInput {
  articles: [ArticleInput!]!
  isPublished: Boolean
  lawId: UUID!
}

type Annotation {
  articleRevision: ArticleRevision!
  comment: String
  createdAt: DateTime!
  definition: String
  id: UUID!
  matter: Matter!
  relationSchema: RelationSchema!
  text: String!
  updatedAt: DateTime!
}

input AnnotationInput {
  comment: String
  definition: String
  matterId: UUID!
  tempId: UUID!
  text: String!
}

type Article {
  id: UUID!
  latestRevision: ArticleRevision
  law: Law!
  revisions: [ArticleRevision!]!
  text: String
  title: String!
}

input ArticleInput {
  annotations: [AnnotationInput!]!
  articleId: UUID!
  jsonText: String
}

type ArticleRevision {
  annotations: [Annotation!]!
  article: Article!
  createdAt: DateTime!
  id: UUID!
  jsonText: String!
  revision: Int!
  updatedAt: DateTime!
}

scalar Date

scalar DateTime

input DeleteLawInput {
  id: UUID!
}

"""
Arbitrary data encoded in JavaScript Object Notation. See https://www.json.org.
"""
scalar JSON

type Law {
  articles: [Article!]!
  createdAt: DateTime!
  id: UUID!
  isPublished: Boolean!
  revision: Int!
  title: String!
  updatedAt: DateTime!
}

type LawAnnotationPivot {
  comment: String
  cursorIndex: Int!
  id: UUID!
}

type Matter {
  annotations: [Annotation!]!
  color: String!
  createdAt: DateTime!
  id: UUID!
  matterRelations: [MatterRelation!]!
  name: String!
  updatedAt: DateTime!
}

type MatterRelation {
  createdAt: DateTime!
  description: String
  id: UUID!
  matterRelationSchema: MatterRelationSchema!
  relatedMatter: Matter!
  relation: MatterRelationEnum!
  updatedAt: DateTime!
}

"""Matter relation enum"""
enum MatterRelationEnum {
  """Requires one"""
  REQUIRES_ONE

  """Requires one or more"""
  REQUIRES_ONE_OR_MORE

  """Requires zero or more"""
  REQUIRES_ZERO_OR_MORE

  """Requires zero or one"""
  REQUIRES_ZERO_OR_ONE
}

input MatterRelationInput {
  description: String
  relatedMatterId: UUID!
  relation: MatterRelationEnum!
}

type MatterRelationSchema {
  createdAt: DateTime!
  id: UUID!
  matter: Matter!
  relationSchema: RelationSchema!
  relations: [MatterRelation!]!
  schemaLayout: String!
  updatedAt: DateTime!
}

input MatterRelationSchemaInput {
  matterId: UUID!
  relationSchemaId: UUID!
}

type MatterRelationType {
  key: MatterRelationEnum!
  value: String!
}

type Mutation {
  deleteLaw(input: DeleteLawInput!): Boolean!
  importXml(file: Upload!): Law!
  publishRelationSchema(id: UUID!): RelationSchema!
  saveAnnotatedLaw(input: AnnotatedLawInput!): Law!
  saveMatterRelationSchema(input: SaveMatterRelationSchemaInput!): MatterRelationSchema!
}

"""Allows ordering a list of records."""
input OrderByClause {
  """The column that is used for ordering."""
  column: String!

  """The direction that is used for ordering."""
  order: SortOrder!
}

"""
Aggregate functions when ordering by a relation without specifying a column.
"""
enum OrderByRelationAggregateFunction {
  """Amount of items."""
  COUNT
}

"""
Aggregate functions when ordering by a relation that may specify a column.
"""
enum OrderByRelationWithColumnAggregateFunction {
  """Average."""
  AVG

  """Amount of items."""
  COUNT

  """Maximum."""
  MAX

  """Minimum."""
  MIN

  """Sum."""
  SUM
}

type Query {
  law(id: UUID!): Law!
  laws: [Law!]!
  matter(id: UUID!): Matter!
  matterRelationSchema(input: MatterRelationSchemaInput!): MatterRelationSchema
  matterRelationSchemas: [MatterRelationSchema!]!
  matterRelationTypes: [MatterRelationType!]!
  matters: [Matter!]!
  relationSchema(id: UUID!): RelationSchema!
  relationSchemas: [RelationSchema!]!
}

type RelationSchema {
  annotations: [Annotation!]!
  createdAt: DateTime!
  expiredAt: DateTime
  id: UUID!
  isPublished: Boolean!
  matterRelationSchemas: [MatterRelationSchema!]!
  updatedAt: DateTime!
}

input SaveMatterRelationSchemaInput {
  matterId: UUID!
  matterRelationSchemaId: UUID
  relationSchemaId: UUID
  relations: [MatterRelationInput!]!
  schemaLayout: String!
}

"""Directions for ordering a list of records."""
enum SortOrder {
  """Sort records in ascending order."""
  ASC

  """Sort records in descending order."""
  DESC
}

"""
Specify if you want to include or exclude trashed results from a query.
"""
enum Trashed {
  """Only return trashed results."""
  ONLY

  """Return both trashed and non-trashed results."""
  WITH

  """Only return non-trashed results."""
  WITHOUT
}

scalar UUID

scalar Upload